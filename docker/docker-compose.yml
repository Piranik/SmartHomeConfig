version: "3.6"

services:
  airconnect:
    container_name: airconnect
    image: swilsonau/docker-airconnect
    network_mode: host
    restart: always
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}

  cadvisor:
    image: google/cadvisor:v0.32.0
    container_name: cadvisor
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      #- /cgroup:/cgroup:ro #doesn't work on MacOS only for Linux
    restart: unless-stopped
    ports:
      - 8282:8080
    labels:
      org.label-schema.group: "monitoring"

  cloud9:
    container_name: cloud9
    image: kdelfour/cloud9-docker
    ports:
      - 8008:80
    volumes:
      - ${HOMEDIR}:/workspace

  docker-cleanup:
    container_name: docker_cleanup
    image: meltwater/docker-cleanup
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /var/lib/docker:/var/lib/docker

  ha-dockermon:
    image: philhawthorne/ha-dockermon
    container_name: ha_dockermon
    restart: always
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ${HOMEDIR}/dockermon:/config
    ports:
      - 8126:8126

  glances:
    container_name: glances
    image: nicolargo/glances
    restart: always
    pid: host
    network_mode: "host"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - 61208:61208
    environment:
      - "GLANCES_OPT=-w"
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    labels:
      - traefik.frontend.rule=Host:glances.tbsmartho.me
      - traefik.port=61208
      - traefik.enable=true

  hass:
    container_name: hass
    image: homeassistant/home-assistant
    restart: on-failure
    depends_on:
      - influxdb
      - mysql
      - ha-dockermon
    volumes:
      - ${HOMEDIR}/homeassistant:/config
      - /etc/localtime:/etc/localtime:ro
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    labels:
      - traefik.frontend.rule=Host:homeassistant.tbsmartho.me
      - traefik.port=8123
      - traefik.enable=true
    network_mode: "host"
    ports:
      - 8123:8123
    healthcheck:
      test: ["CMD", "curl", "-f", "http://127.0.0.1:8123"]
      interval: 30s
      timeout: 10s
      retries: 6

  hass_dev:
    container_name: hass_dev
    image: homeassistant/home-assistant
    restart: on-failure
    depends_on:
      - influxdb
      - mysql
      - ha-dockermon
    volumes:
      - ${HOMEDIR}/hass_dev:/config
      - /etc/localtime:/etc/localtime:ro
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    labels:
      - traefik.frontend.rule=Host:sandbox.homeassistant.tbsmartho.me
      - traefik.port=9123
      - traefik.enable=true
    network_mode: "host"
    ports:
      - 9123:9123
    healthcheck:
      test: ["CMD", "curl", "-f", "http://127.0.0.1:9123"]
      interval: 30s
      timeout: 10s
      retries: 6

  jackett:
    container_name: jackett
    image: linuxserver/jackett
    volumes:
      - ${HOMEDIR}/jackett:/config
    restart: always
    ports:
      - 9117:9117
    labels:
      - traefik.frontend.rule=Host:jackett.tbsmartho.me
      - traefik.docker.network=external
      - traefik.port=9117
      - traefik.enable=true

  # netdata:
  #   container_name: netdata
  #   image: netdata/netdata
  #   hostname: tbsmarthome
  #   ports:
  #     - 19999:19999
  #   cap_add:
  #     - SYS_PTRACE
  #   security_opt:
  #     - apparmor:unconfined
  #   volumes:
  #     - /proc:/host/proc:ro
  #     - /sys:/host/sys:ro
  #     - /var/run/docker.sock:/var/run/docker.sock:ro
  #   environment:
  #     - PUID=${PUID}
  #     - PGID=${PGID}
  #     - TZ=${TZ}
  #   labels:
  #     - traefik.frontend.rule=Host:netdata.tbsmartho.me
  #     #- traefik.docker.network=traefik_public
  #     - traefik.port=19999
  #     - traefik.enable=true

  organizr:
    container_name: organizr
    image: lsiocommunity/organizr
    ports:
      - 81:80
    volumes:
      - ${HOMEDIR}/organizr:/config:rw
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    restart: on-failure
    healthcheck:
      test: ["CMD", "curl", "-f", "http://127.0.0.1"]
      interval: 30s
      timeout: 10s
      retries: 5
    labels:
      - traefik.frontend.rule=Host:organizr.tbsmartho.me
      - traefik.port=80
      - traefik.enable=true

  portainer:
    container_name: portainer
    image: portainer/portainer
    ports:
      - 9000:9000
    volumes:
      - ${HOMEDIR}/portainer:/data:rw
      - /var/run/docker.sock:/var/run/docker.sock
    restart: "no"
    labels:
      - traefik.frontend.rule=Host:portainer.tbsmartho.me
      #- traefik.docker.network=traefik_public
      - traefik.port=9000
      - traefik.enable=true

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    volumes:
      - ${HOMEDIR}/prometheus/:/etc/prometheus/
      - ${HOMEDIR}/prometheus/data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=Australia/Sydney
    user: "1000"
    ports:
      - 9090:9090

  radarr:
    container_name: "radarr"
    image: linuxserver/radarr
    restart: always
    depends_on:
      - jackett
      - transmission
    volumes:
      - ${HOMEDIR}/radarr:/config
      - ${PCDIR}/Movies:/movies
      - ${PCDIR}/DL:/downloads
    ports:
      - 7878:7878
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=Australia/Sydney
    labels:
      - traefik.frontend.rule=Host:radarr.tbsmartho.me
      - traefik.backend=radarr
      #- traefik.docker.network=traefik_public
      - traefik.port=7878
      - traefik.enable=true

  lidarr:
    container_name: "lidarr"
    image: linuxserver/lidarr
    restart: always
    depends_on:
      - jackett
      - transmission
    volumes:
      - ${HOMEDIR}/lidarr:/config
      - ${PCDIR}/Music:/music
      - ${PCDIR}/DL:/downloads
    ports:
      - 8686:8686
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=Australia/Sydney
    labels:
      - traefik.frontend.rule=Host:lidarr.tbsmartho.me
      - traefik.backend=lidarr
      #- traefik.docker.network=traefik_public
      - traefik.port=8686
      - traefik.enable=true

  sabnzbd:
    image: "linuxserver/sabnzbd"
    container_name: "sabnzbd"
    volumes:
      - ${HOMEDIR}/sabnzbd:/config
      - ${PCDIR}/DL:/downloads
      - ${PCDIR}/DL:/incomplete-downloads
    ports:
        - "8082:8080"
    restart: always
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    labels:
      - traefik.frontend.rule=Host:sabnzbd.tbsmartho.me
      - traefik.backend=sabnzbd
      #- traefik.docker.network=traefik_public
      - traefik.port=8080
      - traefik.enable=true

  sonarr:
    container_name: "sonarr"
    image: linuxserver/sonarr
    restart: always
    depends_on:
      - jackett
      - transmission
    volumes:
      - ${HOMEDIR}/sonarr:/config:rw
      - ${PCDIR}/TVShows:/tv:rw
      - ${PCDIR}/DL:/downloads:rw
    ports:
      - 8989:8989
    networks:
      - internal
      - external
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=Australia/Sydney
    labels:
      - traefik.frontend.rule=Host:sonarr.tbsmartho.me
      - traefik.docker.network=external
      - traefik.port=8989
      - traefik.enable=true

  tautulli:
    container_name: "tautulli"
    image: linuxserver/tautulli
    restart: always
    volumes:
      - ${HOMEDIR}/tautulli/config:/config
      - ${HOMEDIR}/tautulli/logs:/logs
    ports:
      - 8181:8181
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=Australia/Sydney
    labels:
      - traefik.frontend.rule=Host:tautulli.tbsmartho.me
      - traefik.docker.network=external
      - traefik.port=8181
      - traefik.enable=true

  transmission:
    container_name: transmission
    image: haugene/transmission-openvpn
    restart: always
    cap_add:
      - NET_ADMIN
    devices:
      - /dev/net/tun
    ports:
      - 9091:9091
      - 51413:51413
      - 51413:51413/udp
    dns:
      - 1.1.1.1
      - 1.0.0.1
    volumes:
      - ${PCDIR}/DL:/data/completed:rw
      - ${PCDIR}/DL:/data/incomplete:rw
      - ${HOMEDIR}/transmission/config:/config
      - ${HOMEDIR}/transmission/watch:/watch
      - /etc/localtime:/etc/localtime:ro
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=Australia/Sydney
      - OPENVPN_PROVIDER=PUREVPN
      - OPENVPN_USERNAME=${OPENVPN_USER}
      - OPENVPN_PASSWORD=${OPENVPN_PASS}
      - OPENVPN_OPTS=--inactive 3600 --ping 10 --ping-exit 60
      - LOCAL_NETWORK=192.168.15.0/24
      - TRANSMISSION_RPC_AUTHENTICATION_REQUIRED=true
      - TRANSMISSION_RPC_HOST_WHITELIST="127.0.0.1,192.168.*.*"
      - TRANSMISSION_RPC_PASSWORD=${TRANSPASS}
      - TRANSMISSION_RPC_USERNAME=${TRANSUSER}
      - TRANSMISSION_UMASK=002
      - TRANSMISSION_RATIO_LIMIT=2.50
      - TRANSMISSION_RATIO_LIMIT_ENABLED=true
      - TRANSMISSION_WEB_UI=combustion
    labels:
      - traefik.frontend.rule=Host:transmission.tbsmartho.me
      - traefik.docker.network=external
      - traefik.port=9091
      - traefik.enable=true

  traefik:
    container_name: traefik
    image: traefik
    command: --web --docker --docker.watch --docker.domain=tbsmartho.me
    ports:
      - target: 80
        published: 80
        protocol: tcp
        mode: host
      - target: 443
        published: 443
        protocol: tcp
        mode: host
      - target: 8080
        published: 8080
        protocol: tcp
    network_mode: "host"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ${HOMEDIR}/traefik/traefik.toml:/traefik.toml:ro
      - ${HOMEDIR}/traefik/acme.json:/acme.json
    environment:
      - CLOUDFLARE_EMAIL=${CLOUDFLARE_EMAIL}
      - CLOUDFLARE_API_KEY=${CLOUDFLARE_API_KEY}
    labels:
      - traefik.frontend.rule=Host:traefik.tbsmartho.me
      - traefik.docker.network=external
      - traefik.port=8080
      - traefik.enable=true

  watchtower:
    container_name: watchtower
    restart: always
    image: v2tec/watchtower
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    command: --schedule "0 0 4 * * *" --cleanup

  node-red:
    container_name: node-red
    image: nodered/node-red-docker:v8
    ports:
      - 1880:1880
    volumes:
      - ${HOMEDIR}/nodered:/data
    restart: always
    depends_on:
      - hass
    user: "1000"
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ = Australia/Sydney
    healthcheck:
      test: ["CMD", "curl", "-f", "http://127.0.0.1:1880"]
      interval: 30s
      timeout: 10s
      retries: 5

  # mosquitto:
  #   container_name: mosquitto
  #   image: eclipse-mosquitto
  #   user: "1000:1000"
  #   ports:
  #     - 1883:1883
  #   volumes:
  #     - /etc/localtime:/etc/localtime:ro
  #     - /home/pi/smarthome/mosquitto:/mosquitto/config:ro
  #     - /home/pi/smarthome/mosquitto:/mosquitto/data
  #   restart: on-failure

  # mqtt-bridge:
  #   container_name: mqtt-bridge
  #   build:
  #     context: https://github.com/stjohnjohnson/smartthings-mqtt-bridge.git
  #     dockerfile: Dockerfile-rpi
  #   ports:
  #     - 8080:8080
  #   volumes:
  #     - /opt/mqtt-bridge:/config
  #   restart: on-failure
  #   depends_on:
  #     homeassistant:
  #       condition: service_healthy

  # ombi:
  #   container_name: "ombi"
  #   image: "linuxserver/ombi"
  #   restart: always
  #   volumes:
  #     - /home/pi/smarthome/ombi:/config
  #   ports:
  #     - 3579:3579
  #   environment:
  #     - PUID=1000
  #     - PGID=1000
  #     - TZ=Australia/Sydney

  grafana:
    container_name: grafana
    image: grafana/grafana
    depends_on:
      - influxdb
    ports:
      - 3000:3000
    volumes:
      - ${HOMEDIR}/grafana:/var/lib/grafana
      - ${HOMEDIR}/grafana:/etc/grafana
      - /etc/timezone:/etc/timezone:ro
    restart: on-failure
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ = Australia/Sydney
    labels:
      - traefik.frontend.rule=Host:grafana.tbsmartho.me
      - traefik.port=3000
      - traefik.enable=true
    network_mode: host
    healthcheck:
      test: ["CMD", "curl", "-sI", "http://127.0.0.1:3000/ping"]
      interval: 30s
      timeout: 1s
      retries: 24
    user: ${PUID}

  influxdb:
    container_name: influxdb
    image: influxdb
    ports:
      - 8083:8083
      - 8086:8086
    volumes:
      - ${HOMEDIR}/influxdb:/var/lib/influxdb
    restart: on-failure
    network_mode: host
    healthcheck:
      test: ["CMD", "curl", "-sI", "http://127.0.0.1:8086/ping"]
      interval: 30s
      timeout: 1s
      retries: 24
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=Australia/Sydney

  mysql:
    container_name: mysql
    image: mysql:5.7
    restart: always
    environment:
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_ROOT_HOST: ${MYSQL_ROOT_HOST}
    ports:
      - 3306:3306
    expose:
      - 3306
    volumes:
      - ${HOMEDIR}/db:/var/lib/mysql:rw,delegated

  # ipam:
  #   container_name: ipam
  #   depends_on:
  #     - mysql
  #   image: pierrecdn/phpipam
  #   environment:
  #     - MYSQL_ENV_MYSQL_USER=root
  #     - MYSQL_ENV_MYSQL_ROOT_PASSWORD=password
  #     - MYSQL_ENV_MYSQL_HOST=192.168.15.20
  #   ports:
  #     - "1800:80"

  adminer:
    image: adminer
    container_name: adminer
    depends_on:
      - mysql
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=Australia/Sydney
    ports:
      - 8100:8080
    restart: always
    volumes:
      - /etc/localtime:/etc/localtime:ro

  alertmanager:
    image: prom/alertmanager:v0.16.1
    container_name: alertmanager
    volumes:
      - ${HOMEDIR}/alertmanager/:/etc/alertmanager/
    command:
      - '--config.file=/etc/alertmanager/config.yml'
      - '--storage.path=/alertmanager'
    restart: unless-stopped
    ports:
      - 9093:9093

  nodeexporter:
    image: prom/node-exporter:v0.17.0
    container_name: nodeexporter
    user: root
    privileged: true
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc)($$|/)'
    restart: unless-stopped
    ports:
      - 9100:9100

  pushgateway:
    image: prom/pushgateway:v0.7.0
    container_name: pushgateway
    restart: unless-stopped
    ports:
      - 9092:9091

networks:
  external:
    external: true
  internal:
    external: false